// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
    }
}

allprojects {
    status = "release"
    repositories {
        mavenCentral()
        jcenter()
    }
}

["core", "santarest-compiler"].each { projectName ->
    project(":$projectName") {

        apply plugin: "maven"
        apply plugin: 'signing'

        group = "com.santarest"
        version = '0.0.1-nightly-15092015'

        signing {
            required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
            sign configurations.archives
        }

        uploadArchives {
            repositories.mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                String status = getParent().status
                String contextUrl = "${artifactory_contextUrl}" + "tn-labs"
                if (status.equals('snapshot')) {
                    contextUrl = "${artifactory_contextUrl}" + "tn-labs-snapshot"
                } else if (status.equals("experimental")) {
                    contextUrl = "${artifactory_contextUrl}" + "tn-labs-experimental"
                }
                repository(url: contextUrl) {
                    authentication(userName: artifactory_user, password: artifactory_password)
                }
                if (projectName.equals("core")) {
                    pom.artifactId = "santarest"
                }
            }
        }

        if (projectName.equals("core")) {
            afterEvaluate { project ->
                task sourcesJar(type: Jar, dependsOn: classes) {
                    classifier = 'sources'
                    from sourceSets.main.allSource
                }

                //TODO: uncomment javadoc task, after javadoc will be added
//                task javadocJar(type: Jar, dependsOn: javadoc) {
//                    classifier = 'javadoc'
//                    from javadoc.destinationDir
//                }

                artifacts {
                    archives sourcesJar
//                    archives javadocJar
                }
            }
        }
    }
}

